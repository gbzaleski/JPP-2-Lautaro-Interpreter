-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language Lautaro.

module Lautaro.Abs where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Programme = Programme' BNFC'Position
data Programme' a = Main a [TopDef' a] [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TopDef = TopDef' BNFC'Position
data TopDef' a
    = FnDef a Ident [Arg' a] (Type' a) [Stmt' a]
    | FnDefVoid a Ident [Arg' a] [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Arg = Arg' BNFC'Position
data Arg' a = ArgVal a (Type' a) Ident | ArgRef a (Type' a) Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Stmt = Stmt' BNFC'Position
data Stmt' a
    = Empty a
    | Skip a
    | Decl a (Type' a) (Item' a)
    | DeclConst a (Type' a) (Item' a)
    | VarSet a Ident (Expr' a)
    | ArrSet a Ident [ArrPos' a] (Expr' a)
    | SReturn a (Expr' a)
    | SVoidReturn a
    | SIf a (Expr' a) [Stmt' a]
    | SIfElse a (Expr' a) [Stmt' a] [Stmt' a]
    | SWhile a (Expr' a) [Stmt' a]
    | Brk a
    | Cnt a
    | SPrint a (Expr' a)
    | SPut a (Expr' a)
    | SAssert a (Expr' a) (Expr' a)
    | SExp a (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Item = Item' BNFC'Position
data Item' a = NoInit a Ident | Init a Ident (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ArrPos = ArrPos' BNFC'Position
data ArrPos' a = ArrArg a (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a = Int a | Str a | Bool a | TArr a (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Expr = Expr' BNFC'Position
data Expr' a
    = EVar a Ident
    | ELitInt a Integer
    | ELitTrue a
    | ELitFalse a
    | EString a String
    | EApp a Ident [Expr' a]
    | EArr a [Expr' a]
    | ArrLen a Ident (Expr' a)
    | ArrDim a Ident
    | ArrApp a Ident [ArrPos' a]
    | StrLength a Ident
    | StrReverse a Ident
    | StrAppend a Ident (Expr' a)
    | StrCut a Ident (Expr' a) (Expr' a)
    | StrReplicate a Ident (Expr' a)
    | Neg a (Expr' a)
    | EMul a (Expr' a) (MulOp' a) (Expr' a)
    | EAdd a (Expr' a) (AddOp' a) (Expr' a)
    | ERel a (Expr' a) (RelOp' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = Plus a | Minus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = Times a | Div a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = LTH a | GTH a | LE a | GE a | EQU a | NE a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Programme where
  hasPosition = \case
    Main p _ _ -> p

instance HasPosition TopDef where
  hasPosition = \case
    FnDef p _ _ _ _ -> p
    FnDefVoid p _ _ _ -> p

instance HasPosition Arg where
  hasPosition = \case
    ArgVal p _ _ -> p
    ArgRef p _ _ -> p

instance HasPosition Stmt where
  hasPosition = \case
    Empty p -> p
    Skip p -> p
    Decl p _ _ -> p
    DeclConst p _ _ -> p
    VarSet p _ _ -> p
    ArrSet p _ _ _ -> p
    SReturn p _ -> p
    SVoidReturn p -> p
    SIf p _ _ -> p
    SIfElse p _ _ _ -> p
    SWhile p _ _ -> p
    Brk p -> p
    Cnt p -> p
    SPrint p _ -> p
    SPut p _ -> p
    SAssert p _ _ -> p
    SExp p _ -> p

instance HasPosition Item where
  hasPosition = \case
    NoInit p _ -> p
    Init p _ _ -> p

instance HasPosition ArrPos where
  hasPosition = \case
    ArrArg p _ -> p

instance HasPosition Type where
  hasPosition = \case
    Int p -> p
    Str p -> p
    Bool p -> p
    TArr p _ -> p

instance HasPosition Expr where
  hasPosition = \case
    EVar p _ -> p
    ELitInt p _ -> p
    ELitTrue p -> p
    ELitFalse p -> p
    EString p _ -> p
    EApp p _ _ -> p
    EArr p _ -> p
    ArrLen p _ _ -> p
    ArrDim p _ -> p
    ArrApp p _ _ -> p
    StrLength p _ -> p
    StrReverse p _ -> p
    StrAppend p _ _ -> p
    StrCut p _ _ _ -> p
    StrReplicate p _ _ -> p
    Neg p _ -> p
    EMul p _ _ _ -> p
    EAdd p _ _ _ -> p
    ERel p _ _ _ -> p

instance HasPosition AddOp where
  hasPosition = \case
    Plus p -> p
    Minus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    Times p -> p
    Div p -> p

instance HasPosition RelOp where
  hasPosition = \case
    LTH p -> p
    GTH p -> p
    LE p -> p
    GE p -> p
    EQU p -> p
    NE p -> p

