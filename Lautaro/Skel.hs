-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Lautaro.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Lautaro.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Lautaro.Abs.Ident -> Result
transIdent x = case x of
  Lautaro.Abs.Ident string -> failure x

transProgramme :: Show a => Lautaro.Abs.Programme' a -> Result
transProgramme x = case x of
  Lautaro.Abs.Main _ topdefs stmts -> failure x

transTopDef :: Show a => Lautaro.Abs.TopDef' a -> Result
transTopDef x = case x of
  Lautaro.Abs.FnDef _ ident args type_ stmts -> failure x
  Lautaro.Abs.FnDefVoid _ ident args stmts -> failure x

transArg :: Show a => Lautaro.Abs.Arg' a -> Result
transArg x = case x of
  Lautaro.Abs.ArgVal _ type_ ident -> failure x
  Lautaro.Abs.ArgRef _ type_ ident -> failure x

transStmt :: Show a => Lautaro.Abs.Stmt' a -> Result
transStmt x = case x of
  Lautaro.Abs.Empty _ -> failure x
  Lautaro.Abs.Skip _ -> failure x
  Lautaro.Abs.Decl _ type_ item -> failure x
  Lautaro.Abs.DeclConst _ type_ item -> failure x
  Lautaro.Abs.VarSet _ ident expr -> failure x
  Lautaro.Abs.ArrSet _ ident arrposs expr -> failure x
  Lautaro.Abs.SReturn _ expr -> failure x
  Lautaro.Abs.SVoidReturn _ -> failure x
  Lautaro.Abs.SIf _ expr stmts -> failure x
  Lautaro.Abs.SIfElse _ expr stmts1 stmts2 -> failure x
  Lautaro.Abs.SWhile _ expr stmts -> failure x
  Lautaro.Abs.Brk _ -> failure x
  Lautaro.Abs.Cnt _ -> failure x
  Lautaro.Abs.SPrint _ expr -> failure x
  Lautaro.Abs.SPut _ expr -> failure x
  Lautaro.Abs.SAssert _ expr1 expr2 -> failure x
  Lautaro.Abs.SExp _ expr -> failure x

transItem :: Show a => Lautaro.Abs.Item' a -> Result
transItem x = case x of
  Lautaro.Abs.NoInit _ ident -> failure x
  Lautaro.Abs.Init _ ident expr -> failure x

transArrPos :: Show a => Lautaro.Abs.ArrPos' a -> Result
transArrPos x = case x of
  Lautaro.Abs.ArrArg _ expr -> failure x

transType :: Show a => Lautaro.Abs.Type' a -> Result
transType x = case x of
  Lautaro.Abs.Int _ -> failure x
  Lautaro.Abs.Str _ -> failure x
  Lautaro.Abs.Bool _ -> failure x
  Lautaro.Abs.TArr _ type_ -> failure x

transExpr :: Show a => Lautaro.Abs.Expr' a -> Result
transExpr x = case x of
  Lautaro.Abs.EVar _ ident -> failure x
  Lautaro.Abs.ELitInt _ integer -> failure x
  Lautaro.Abs.ELitTrue _ -> failure x
  Lautaro.Abs.ELitFalse _ -> failure x
  Lautaro.Abs.EString _ string -> failure x
  Lautaro.Abs.EApp _ ident exprs -> failure x
  Lautaro.Abs.EArr _ exprs -> failure x
  Lautaro.Abs.ArrLen _ ident expr -> failure x
  Lautaro.Abs.ArrDim _ ident -> failure x
  Lautaro.Abs.ArrApp _ ident arrposs -> failure x
  Lautaro.Abs.StrLength _ ident -> failure x
  Lautaro.Abs.StrReverse _ ident -> failure x
  Lautaro.Abs.StrAppend _ ident expr -> failure x
  Lautaro.Abs.StrCut _ ident expr1 expr2 -> failure x
  Lautaro.Abs.StrReplicate _ ident expr -> failure x
  Lautaro.Abs.Neg _ expr -> failure x
  Lautaro.Abs.EMul _ expr1 mulop expr2 -> failure x
  Lautaro.Abs.EAdd _ expr1 addop expr2 -> failure x
  Lautaro.Abs.ERel _ expr1 relop expr2 -> failure x

transAddOp :: Show a => Lautaro.Abs.AddOp' a -> Result
transAddOp x = case x of
  Lautaro.Abs.Plus _ -> failure x
  Lautaro.Abs.Minus _ -> failure x

transMulOp :: Show a => Lautaro.Abs.MulOp' a -> Result
transMulOp x = case x of
  Lautaro.Abs.Times _ -> failure x
  Lautaro.Abs.Div _ -> failure x

transRelOp :: Show a => Lautaro.Abs.RelOp' a -> Result
transRelOp x = case x of
  Lautaro.Abs.LTH _ -> failure x
  Lautaro.Abs.GTH _ -> failure x
  Lautaro.Abs.LE _ -> failure x
  Lautaro.Abs.GE _ -> failure x
  Lautaro.Abs.EQU _ -> failure x
  Lautaro.Abs.NE _ -> failure x
